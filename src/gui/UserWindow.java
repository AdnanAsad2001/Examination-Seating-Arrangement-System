package gui;

import core.DB;
import core.PrintTable;
import core.SeatingArranger;
import core.Validator;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdminWindow.java
 *
 */
/**
 *
 * @author admin
 */
public class UserWindow extends javax.swing.JFrame {

    /** Creates new form AdminWindow */
    public UserWindow() {

        // Don't want bold fonts if we end up using metal
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (Exception ex) {
            System.out.println("Unable to load native look and feel");
        }
        initComponents();

        // centring the window...............................
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension ssize = toolkit.getScreenSize();
        int x = (int) (ssize.getWidth() - this.getWidth()) / 2;
        int y = (int) (ssize.getHeight() - this.getHeight()) / 2;
        this.setLocation(x, y);
        //...................................................

        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jButton19 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jList7 = new javax.swing.JList();
        jTextField17 = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jComboBox7 = new javax.swing.JComboBox();
        jButton24 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jTextField26 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jButton29 = new javax.swing.JButton();
        jTextField25 = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        jList9 = new javax.swing.JList();
        jButton28 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jButton35 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jButton37 = new javax.swing.JButton();
        jTextField28 = new javax.swing.JTextField();
        jScrollPane15 = new javax.swing.JScrollPane();
        jList11 = new javax.swing.JList();
        jPanel14 = new javax.swing.JPanel();
        jTextField27 = new javax.swing.JTextField();
        jScrollPane14 = new javax.swing.JScrollPane();
        jList10 = new javax.swing.JList();
        jPanel19 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jTextField29 = new javax.swing.JTextField();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jTextField30 = new javax.swing.JTextField();
        jButton30 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Examination Seating Arrangement System");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                windowGF(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jButton19.setText("Add Batch");
        jButton19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Batch_AddBatch_MP(evt);
            }
        });

        jScrollPane11.setBorder(javax.swing.BorderFactory.createTitledBorder("Batch List"));

        jList7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batch_batchList_MP(evt);
            }
        });
        jScrollPane11.setViewportView(jList7);

        jTextField17.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        jTextField17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batch_search_ActionPerformed(evt);
            }
        });

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Batch Details"));

        jLabel18.setText("Name");

        jLabel19.setText("Batch No.");

        jLabel20.setText("Scheme");

        jButton20.setText("Save");
        jButton20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batch_batchDetails_Save_MP(evt);
            }
        });

        jButton21.setText("Delete");
        jButton21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batch_batchDetails_Delete_MP(evt);
            }
        });

        jButton24.setText("More Info");
        jButton24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batch_batchDetails_moreInfo_MP(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField22, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField21, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton24)
                                .addGap(18, 18, 18)
                                .addComponent(jButton20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton21))
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox7, 0, 260, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton21)
                    .addComponent(jButton20)
                    .addComponent(jButton24))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton34.setText("Print Batch Students");
        jButton34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batch_printBatchStudents_MP(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jTextField17, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton19)
                    .addComponent(jButton34))
                .addContainerGap())
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton19, jButton34});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton19)
                        .addGap(18, 18, 18)
                        .addComponent(jButton34))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Batch", jPanel7);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam Details"));

        jLabel26.setText("Name");

        jLabel27.setText("Date");

        jButton25.setText("Save");
        jButton25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ExamDetails_Save_MP(evt);
            }
        });

        jButton26.setText("Delete");
        jButton26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ExamDetails_Delete_MP(evt);
            }
        });

        jButton27.setText("More Info");
        jButton27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                examDetails_moreInfo_MP(evt);
            }
        });

        jLabel28.setText("Time");

        jLabel29.setText("Description");

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane8.setViewportView(jTextArea5);

        jButton29.setText("Edit Subject & Batches");
        jButton29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exam_examDetails_EditSubjectAndBatches_MP(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(jTextField24, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(jTextField23, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(jTextField26, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jButton27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton29))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jButton25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton26)))
                .addContainerGap())
        );

        jTextField25.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        jTextField25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exam_search_ActionPerformed(evt);
            }
        });

        jScrollPane13.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam List"));

        jList9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exam_examList_MP(evt);
            }
        });
        jScrollPane13.setViewportView(jList9);

        jButton28.setText("Add Exam");
        jButton28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exam_AddExam_MP(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jTextField25, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton28)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton28))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Exam", jPanel12);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam Seating Details"));

        jLabel32.setText("Seating Arranged");

        jTextField31.setEditable(false);

        jButton35.setText("Absenties");
        jButton35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                attendance_absenties_MP(evt);
            }
        });

        jLabel33.setText("Exam Name");

        jTextField32.setEditable(false);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField31, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(jTextField32, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(jButton35, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton35)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton37.setText("Print Absentiees List");
        jButton37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                attendance_printAbsentiesList_MP(evt);
            }
        });

        jTextField28.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        jTextField28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendance_searchExam_ActionPerformed(evt);
            }
        });

        jScrollPane15.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam List"));

        jList11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                attendance_examList_MP(evt);
            }
        });
        jScrollPane15.setViewportView(jList11);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jTextField28, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton37))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton37))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Attendance", jPanel13);

        jTextField27.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        jTextField27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Seatingexam_searchExam_ActionPerformed(evt);
            }
        });

        jScrollPane14.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam List"));

        jList10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seatingexam_examList_MP(evt);
            }
        });
        jScrollPane14.setViewportView(jList10);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam Seating Details"));

        jLabel30.setText("Seating Arranged");

        jTextField29.setEditable(false);

        jButton31.setText("Arrange Seats");
        jButton31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seating_examSeating_arrangeSeating_MP(evt);
            }
        });

        jButton32.setText("Clear Seating");
        jButton32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seating_examSeating_clearSeating_MP(evt);
            }
        });

        jLabel31.setText("Exam Name");

        jTextField30.setEditable(false);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField29, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(jTextField30, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButton32)
                        .addGap(18, 18, 18)
                        .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel19Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton31, jButton32});

        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton31)
                    .addComponent(jButton32))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton30.setText("Print Seating Chart");
        jButton30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seating_printSeatingChart_MP(evt);
            }
        });

        jButton33.setText("Check Seating");
        jButton33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                seating_checkSeating_MP(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jTextField27, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton30)
                    .addComponent(jButton33))
                .addContainerGap())
        );

        jPanel14Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton30, jButton33});

        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton30)
                        .addGap(18, 18, 18)
                        .addComponent(jButton33))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Seating", jPanel14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Batch_AddBatch_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Batch_AddBatch_MP
        AddBatch.main(null);
    }//GEN-LAST:event_Batch_AddBatch_MP
    String currentHallID;
    String currentSchemeID;
    String currentStaffID;
    String currentStudentID;
    private void batch_search_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batch_search_ActionPerformed
        try {
            ResultSet r = DB.executeQuery("select id from batches where id like '%" + jTextField17.getText() + "%'");
            Vector v = new Vector();
            while (r != null && r.next()) {
                v.add(r.getString("id"));
            }
            jList7.setListData(v);
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_batch_search_ActionPerformed
    String currentSubjectID;
    String currentDeptID;
    String currentBatchID = "";
    private void batch_batchList_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batch_batchList_MP
        if (jList7.getSelectedValue() != null) {
            String selectedBatch = jList7.getSelectedValue().toString();

            ResultSet r = DB.executeQuery("select * from batches where id = " + selectedBatch);
            try {
                r.next();
                jTextField22.setText(r.getString("name"));
                jTextField21.setText(r.getString("id"));
                jComboBox7.setSelectedItem(r.getString("schemeid"));
                currentBatchID = r.getString("id");
            } 
            catch (Exception ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        }
    }//GEN-LAST:event_batch_batchList_MP

    private void batch_batchDetails_Delete_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batch_batchDetails_Delete_MP
        if (JOptionPane.showConfirmDialog(rootPane, "Delete This Batch?", "Batch Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            if (DB.executeUpdate("delete from batches where id = " + currentBatchID)) {
                JOptionPane.showMessageDialog(rootPane, "Batch Deleted");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Batch Deletion Failed !!!");
            }
        }
        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_batch_batchDetails_Delete_MP

    private void batch_batchDetails_Save_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batch_batchDetails_Save_MP
        if (jTextField22.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Batch Name !!!");
        }
        else if (jTextField21.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Batch No. !!!");
        }
        else if (jComboBox7.getSelectedItem().toString().contentEquals("Select Scheme")) {
            JOptionPane.showMessageDialog(rootPane, "Select a Scheme !!!");
        }
        else {
            if (DB.executeUpdate("update batches set "
                    + "name = '" + jTextField22.getText() + "', "
                    + "id = " + jTextField21.getText() + " , "
                    + "schemeid = '" + jComboBox7.getSelectedItem().toString() + "' "
                    + "where id = " + currentBatchID)) {
                JOptionPane.showMessageDialog(rootPane, "Batch Edited Susseccfully");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Batch Edition Failed !!!");
            }
        }
        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_batch_batchDetails_Save_MP

    private void batch_batchDetails_moreInfo_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batch_batchDetails_moreInfo_MP
        MoreInfoBatch.batchID = currentBatchID;
        MoreInfoBatch.main(null);
    }//GEN-LAST:event_batch_batchDetails_moreInfo_MP

    private void ExamDetails_Save_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExamDetails_Save_MP
        if (jTextField24.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Exam Name !!!");
        }
        else if (jTextField23.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Exam Date !!!");
        }
        else if (jTextField26.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Exam Time !!!");
        }
        else {
            if (DB.executeUpdate("update exams set "
                    + "name = '" + jTextField24.getText() + "', "
                    + "date = '" + jTextField23.getText() + "', "
                    + "time = '" + jTextField26.getText() + "', "
                    + "description = '" + jTextArea5.getText() + "' "
                    + "where id = " + currentExamID)) {
                JOptionPane.showMessageDialog(rootPane, "Exam Edited Susseccfully");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Exam Edition Failed !!!");
            }
        }
        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
}//GEN-LAST:event_ExamDetails_Save_MP

    private void ExamDetails_Delete_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExamDetails_Delete_MP
        if (JOptionPane.showConfirmDialog(rootPane, "Delete This Exam?", "Exam Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            if (DB.executeUpdate("delete from exams where id = " + currentExamID)) {
                JOptionPane.showMessageDialog(rootPane, "Exam Deleted");
            } 
            else {
                JOptionPane.showMessageDialog(rootPane, "Exam Deletion Failed !!!");
            }
        }
        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
}//GEN-LAST:event_ExamDetails_Delete_MP

    private void examDetails_moreInfo_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examDetails_moreInfo_MP
        MoreInfoExam.examID = currentExamID;
        MoreInfoExam.main(null);
}//GEN-LAST:event_examDetails_moreInfo_MP

    private void exam_search_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exam_search_ActionPerformed
        try {
            ResultSet r = DB.executeQuery("select name from exams where name like '%" + jTextField25.getText() + "%'");
            Vector v = new Vector();
            while (r != null && r.next()) {
                v.add(r.getString("name"));
            }
            jList9.setListData(v);
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
}//GEN-LAST:event_exam_search_ActionPerformed
    String currentExamID;
    private void exam_examList_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exam_examList_MP
        if (jList9.getSelectedValue() != null) {
            String selectedExam = jList9.getSelectedValue().toString();

            ResultSet r = DB.executeQuery("select * from exams where name = '" + selectedExam + "'");
            try {
                r.next();
                jTextField24.setText(r.getString("name"));
                jTextField23.setText(r.getString("date"));
                jTextField26.setText(r.getString("time"));
                jTextArea5.setText(r.getString("description"));
                currentExamID = r.getString("id");
            } 
            catch (Exception ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        }
}//GEN-LAST:event_exam_examList_MP

    private void exam_AddExam_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exam_AddExam_MP
        AddExam.main(null);
}//GEN-LAST:event_exam_AddExam_MP

    private void exam_examDetails_EditSubjectAndBatches_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exam_examDetails_EditSubjectAndBatches_MP
        if (currentExamID != null && !currentExamID.isEmpty()) {
            EditExamSubjectsAndBatches.examID = currentExamID;
            EditExamSubjectsAndBatches.main(null);
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Select a Exam !!!");
        }
    }//GEN-LAST:event_exam_examDetails_EditSubjectAndBatches_MP

    private void Seatingexam_searchExam_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Seatingexam_searchExam_ActionPerformed
        try {
            ResultSet r = DB.executeQuery("select name from exams where name like '%" + jTextField27.getText() + "%'");
            Vector v = new Vector();
            while (r != null && r.next()) {
                v.add(r.getString("name"));
            }
            jList10.setListData(v);
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_Seatingexam_searchExam_ActionPerformed
    String currentSeatingExamID = "";
    private void seatingexam_examList_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seatingexam_examList_MP
        if (jList10.getSelectedValue() != null) {
            String selectedSeatingExam = jList10.getSelectedValue().toString();

            ResultSet r = DB.executeQuery("select * from exams where name = '" + selectedSeatingExam + "'");
            try {
                r.next();
                jTextField30.setText(r.getString("name"));
                currentSeatingExamID = r.getString("id");

                r = DB.executeQuery("select count(*) from seatings where examid = " + currentSeatingExamID);
                if (r != null && r.next() && Integer.parseInt(r.getString(1)) > 0) {
                    jTextField29.setText("ARRANGED");
                } 
                else {
                    jTextField29.setText("NOT ARRANGED");
                }

            } 
            catch (Exception ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        }
    }//GEN-LAST:event_seatingexam_examList_MP

    private void seating_examSeating_clearSeating_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seating_examSeating_clearSeating_MP
        try {
            if (currentSeatingExamID.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Select a Exam for Clearing Seating Arrangements!!!");
            }
            else {
                ResultSet r = DB.executeQuery("select count(*) from seatings where examid = " + currentSeatingExamID);
                if (r != null && r.next() && Integer.parseInt(r.getString(1)) > 0) {
                    if (JOptionPane.showConfirmDialog(rootPane, "Clear Seating for this Exam?", "Clear Seating", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                        if (DB.executeUpdate("delete from seatings where examid = " + currentSeatingExamID)) {
                            JOptionPane.showMessageDialog(rootPane, "Exam Seating Deleted");
                        }
                        else {
                            JOptionPane.showMessageDialog(rootPane, "Exam Seating Deletion Failed !!!");
                        }
                    }
                } 
                else {
                    JOptionPane.showMessageDialog(rootPane, "No Seating Arranged for this Exam !!!");
                }
            }
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_seating_examSeating_clearSeating_MP

    private void seating_examSeating_arrangeSeating_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seating_examSeating_arrangeSeating_MP
        if (currentSeatingExamID.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Select a Exam for Seat Arranging!!!");
        }
        else {
            SeatingArranger.ExamID = currentSeatingExamID;
            ExamSeatingArranger.main(null);
        }
    }//GEN-LAST:event_seating_examSeating_arrangeSeating_MP

    private void windowGF(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowGF
        try {
            loadDataToFields();
        } 
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_windowGF

    private void batch_printBatchStudents_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batch_printBatchStudents_MP
        if (currentBatchID.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Select a Batch !!!");
        }
        else {
            ResultSet r = DB.executeQuery("select * from students where batchid=" + currentBatchID + " order by deptid");
            if (r != null) {
                try {
                    String[][] rowData = null;
                    // table showing two columns of student datas ..........
                    String[] columnNames = {"Name", "Dept", "Reg No."};
                    
                    ResultSet r2 = DB.executeQuery("select count(*) from students where batchid=" + currentBatchID);
                    r2.next();
                    int noOfStudents = Integer.parseInt(r2.getString(1));

                    rowData = new String[noOfStudents][3];
                    // load student datas ...............
                    int ri = 0;
                    while (r.next()) {
                        rowData[ri][0] = r.getString("name");
                        rowData[ri][1] = r.getString("deptid");
                        rowData[ri][2] = r.getString("regno");
                        ri++;
                    }
                    // printing students data (name + regno) ............
                    new PrintTable("Batch Students", "Batch ID:" + currentBatchID, rowData, columnNames);
                }
                catch (SQLException ex) {
                    Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                finally{
                    DB.flushStatementOnly();
                }
            } 
            else {
                JOptionPane.showMessageDialog(rootPane, "No Students in This Batch !!!");
            }
        }
    }//GEN-LAST:event_batch_printBatchStudents_MP

    private void seating_printSeatingChart_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seating_printSeatingChart_MP
        if (!currentSeatingExamID.isEmpty()) {
            try {
                // get the list of halls for the exam...
                Vector<String> Halls = new Vector<String>();
                ResultSet r = DB.executeQuery("select distinct hallname from seatings where examid=" + currentSeatingExamID);
                while (r != null && r.next()) {
                    Halls.add(r.getString("hallname"));
                }

                // for each hall......................................
                for (String hall : Halls) {
                    // get the noofrow and noofcol for that hall...
                    int noofrow = 0, noofcol = 0;
                    r = DB.executeQuery("select noofrow,noofcol from halls where name='" + hall + "'");
                    r.next();
                    noofrow = Integer.parseInt(r.getString("noofrow"));
                    noofcol = Integer.parseInt(r.getString("noofcol"));
                    // create rowdata [noofrow][2*noofcol]
                    String rowData[][] = new String[noofrow][2 * noofcol];
                    // create coldata [2*noofcol];
                    String colData[] = new String[2 * noofcol];
                    // populate coldata with headers......
                    for (int i = 0; i < colData.length; i++) {
                        if (i % 2 == 0) {
                            colData[i] = "Left";
                        }
                        else {
                            colData[i] = "Right";
                        }
                    }
                    // initialsize seatno = 1;
                    int SeatNo = 1;
                    // for : noofcol - ic=0 ; ic+=2 ;
                    // for : noofrow - ir=0 ; ir++ ;
                    for (int ic = 0; ic < noofcol; ic += 2) {
                        for (int ir = 0; ir < noofrow; ir++) {
                            // get regid for seat+"L" and seat+"R"
                            // save it in rowdata[ir][ic] and rowdata[ir][ic+1];
                            r = DB.executeQuery("select studentregno from seatings where seatno='" + SeatNo + "L" + "' and hallname='" + hall + "' and examid=" + currentSeatingExamID);
                            if (r.next()) {
                                rowData[ir][ic] = r.getString("studentregno");
                            }
                            r = DB.executeQuery("select studentregno from seatings where seatno='" + SeatNo + "R" + "' and hallname='" + hall + "' and examid=" + currentSeatingExamID);
                            if (r.next()) {
                                rowData[ir][ic + 1] = r.getString("studentregno");
                            }
                            SeatNo++;
                        }
                    }
                    // print table...
                    new PrintTable("Hall Seating", "Hall Name: " + hall, rowData, colData);
                }
            } 
            catch (SQLException ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Select a Exam !!!");
        }
    }//GEN-LAST:event_seating_printSeatingChart_MP

    private void seating_checkSeating_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seating_checkSeating_MP
        if (!currentSeatingExamID.isEmpty()) {
            SeatingCheck.currentSeatingExamID = currentSeatingExamID;
            SeatingCheck.main(null);
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Select a Exam !!!");
        }
    }//GEN-LAST:event_seating_checkSeating_MP

    private void attendance_absenties_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendance_absenties_MP
        if (!jTextField31.getText().contentEquals("NOT ARRANGED")) {
            Absentees.currentAttendanceExamID = currentAttendanceExamID;
            Absentees.main(null);
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Seating Not Arranged for this Exam ! No Absentee for this Exam !!!");
        }
    }//GEN-LAST:event_attendance_absenties_MP

    private void attendance_printAbsentiesList_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendance_printAbsentiesList_MP
        if (!jTextField31.getText().contentEquals("NOT ARRANGED")) {
            try {
                // print absentees for this exam ... currentAttendanceExamID
                Vector<String> absentees = new Vector<String>();
                ResultSet r = DB.executeQuery("select studentregno from absentees where examid=" + currentAttendanceExamID + " order by studentregno");
                // load all absentees regno ..............................
                while (r != null && r.next()) {
                    absentees.add(r.getString("studentregno"));
                }
                // find halls and seat no of each individual absentees ........................
                Vector<String> hall = new Vector<String>();
                Vector<String> seatno = new Vector<String>();
                Vector<String> studentname = new Vector<String>();
                for (String abst : absentees) {
                    r = DB.executeQuery("select hallname,seatno from seatings where studentregno='" + abst + "' and examid=" + currentAttendanceExamID);
                    r.next();
                    hall.add(r.getString("hallname"));
                    seatno.add(r.getString("seatno"));
                    r = DB.executeQuery("select name from students where regno='" + abst + "'");
                    r.next();
                    studentname.add(r.getString("name"));
                }
                // populate data for printing .......
                // create rowdata
                String rowData[][] = new String[absentees.size()][4];
                // create coldata , populate coldata with headers......
                String colData[] = {"Reg No.", "Name", "Hall", "Seat No."};
                // for each absentees .................................
                for (int i = 0; i < absentees.size(); i++) {
                    rowData[i][0] = absentees.elementAt(i);
                    rowData[i][1] = studentname.elementAt(i);
                    rowData[i][2] = hall.elementAt(i);
                    rowData[i][3] = seatno.elementAt(i);
                }
                // print table...
                String examName;
                r = DB.executeQuery("select name from exams where id=" + currentAttendanceExamID);
                r.next();
                examName = r.getString("name");

                new PrintTable("Absentees List", "Exam :" + examName, rowData, colData);

            } 
            catch (SQLException ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Seating Not Arranged for this Exam ! No Absentee for this Exam !!!");
        }
    }//GEN-LAST:event_attendance_printAbsentiesList_MP

    private void attendance_searchExam_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendance_searchExam_ActionPerformed
        try {
            ResultSet r = DB.executeQuery("select name from exams where name like '%" + jTextField28.getText() + "%'");
            Vector v = new Vector();
            while (r != null && r.next()) {
                v.add(r.getString("name"));
            }
            jList11.setListData(v);
        }
        catch (SQLException ex) {
            Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            DB.flushStatementOnly();
        }
    }//GEN-LAST:event_attendance_searchExam_ActionPerformed
    String currentAttendanceExamID = "";
    private void attendance_examList_MP(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendance_examList_MP
        if (jList11.getSelectedValue() != null) {
            String selectedSeatingExam = jList11.getSelectedValue().toString();

            ResultSet r = DB.executeQuery("select * from exams where name = '" + selectedSeatingExam + "'");
            try {
                r.next();
                jTextField32.setText(r.getString("name"));
                currentAttendanceExamID = r.getString("id");

                r = DB.executeQuery("select count(*) from seatings where examid = " + currentAttendanceExamID);
                if (r != null && r.next() && Integer.parseInt(r.getString(1)) > 0) {
                    jTextField31.setText("ARRANGED");
                }
                else {
                    jTextField31.setText("NOT ARRANGED");
                }
            } 
            catch (Exception ex) {
                Logger.getLogger(UserWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                DB.flushStatementOnly();
            }
        }
    }//GEN-LAST:event_attendance_examList_MP

    private void loadDataToFields() throws SQLException {
        // batch load scheme
        Vector<String> v = new Vector();
        v.add("Select Scheme");
        ResultSet r = DB.executeQuery("select id from schemes");
        if (r != null) {
            while (r.next()) {
                v.add(r.getString("id"));
            }
        }
        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(v));
        DB.flushStatementOnly();
        // subject load scheme
        // students search load batch
        v = new Vector();
        v.add("Select Batch");
        r = DB.executeQuery("select id from batches");
        if (r != null) {
            while (r.next()) {
                v.add(r.getString("id"));
            }
        }
        // batch list
        v.remove(0);
        jList7.setListData(v);
        DB.flushStatementOnly();

        // Exam list
        v = new Vector();
        r = DB.executeQuery("select name from exams");
        if (r != null) {
            while (r.next()) {
                v.add(r.getString("name"));
            }
        }
        jList9.setListData(v);
        jList10.setListData(v);
        jList11.setListData(v);
        DB.flushStatementOnly();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton37;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JList jList10;
    private javax.swing.JList jList11;
    private javax.swing.JList jList7;
    private javax.swing.JList jList9;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    // End of variables declaration//GEN-END:variables
}
